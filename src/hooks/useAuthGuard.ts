import { useEffect, useMemo, useRef, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { auth } from "../services/auth";
import { getToken, clearToken } from "../services/tokenStore"; // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° clearToken

// ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á type ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
type User = { id: string | number; email?: string; role?: string; [k: string]: any };

type GuardOptions = {
  /** ‡∏ñ‡πâ‡∏≤ true (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô) ‡∏à‡∏∞‡πÄ‡∏î‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô */
  autoRedirect?: boolean;
  /** ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏î‡πâ‡∏á (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‚Äî ‡πÉ‡∏™‡πà 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏î‡πâ‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ */
  redirectDelayMs?: number;
  /** ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 401/403 */
  redirectTo?: {
    unauthorized?: string; // ‡πÑ‡∏°‡πà‡∏°‡∏µ token / ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    forbidden?: string;    // role ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
  };
  /** callback ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å logout (‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡πâ‡∏≤‡∏á cache ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ) */
  onLogout?: () => void;
};

export function useAuthGuard(allowedRoles: string[] = [], opts: GuardOptions = {}) {
  const {
    autoRedirect = true,
    redirectDelayMs = 10000,
    redirectTo = { unauthorized: "/login", forbidden: "/" },
    onLogout,
  } = opts;

  const navigate = useNavigate();
  const location = useLocation();

  const [loading, setLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [status, setStatus] = useState<number | null>(null);

  // ‡πÉ‡∏´‡πâ effect re-run ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ä‡∏∏‡∏î role ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  const rolesKey = useMemo(() => allowedRoles.slice().sort().join("|"), [allowedRoles]);

  // ‡πÄ‡∏Å‡πá‡∏ö timer id ‡πÑ‡∏ß‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏≠‡∏ô unmount/‡∏Å‡πà‡∏≠‡∏ô redirect ‡πÉ‡∏´‡∏°‡πà
  const timersRef = useRef<number[]>([]);
  const scheduleNav = (to: string, state?: any) => {
    if (!autoRedirect) return;
    const id = window.setTimeout(() => {
      navigate(to, { replace: true, state });
    }, redirectDelayMs);
    timersRef.current.push(id);
  };

  // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô LOGOUT ‡πÅ‡∏ö‡∏ö A (frontend-only)
  const logout = (to?: string) => {
    // 1) ‡∏õ‡∏¥‡∏î timer ‡πÄ‡∏î‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
    timersRef.current.forEach((id) => clearTimeout(id));
    timersRef.current = [];

    // 2) ‡∏•‡∏ö token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å storage
    try { clearToken?.(); } catch {}

    // 3) ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô hook
    setUser(null);
    setStatus(401);

    // 4) callback ‡πÄ‡∏™‡∏£‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏ä‡πà‡∏ô reset query cache
    try { onLogout?.(); } catch {}

    // 5) ‡πÄ‡∏î‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ unauthorized)
    const target = to ?? redirectTo.unauthorized ?? "/login";
    if (autoRedirect) {
      if (redirectDelayMs === 0) {
        navigate(target, { replace: true });
      } else {
        scheduleNav(target);
      }
    }
  };

  useEffect(() => {
    let cancelled = false;

    const run = async () => {
      const token = getToken?.();

      // 1) ‡πÑ‡∏°‡πà‡∏°‡∏µ token ‚Üí 401
      if (!token) {
        if (!cancelled) {
          setUser(null);
          setStatus(401);
          setLoading(false);
        }
        scheduleNav(redirectTo.unauthorized || "/login", { from: location.pathname });
        return;
      }

      // 2) ‡∏°‡∏µ token ‚Üí ‡πÑ‡∏õ‡∏î‡∏∂‡∏á /me
      try {
        const res = await auth.me();
        const me = (res as any)?.data?.data ?? (res as any)?.data ?? res ?? null;

        if (cancelled) return;

        setUser(me);

        // ‡∏ï‡∏£‡∏ß‡∏à role ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ allowedRoles
        if (allowedRoles.length > 0) {
          const role = String(me?.role ?? "").toLowerCase();
          const ok = allowedRoles.map(r => r.toLowerCase()).includes(role);
          if (!ok) {
            setStatus(403);
            setLoading(false);
            scheduleNav(redirectTo.forbidden || "/");
            return;
          }
        }

        setStatus(200);
      } catch (e: any) {
        if (cancelled) return;
        setUser(null);
        setStatus(e?.response?.status ?? 0); // network = 0
        setLoading(false);
        scheduleNav(redirectTo.unauthorized || "/login", { from: location.pathname });
        return;
      } finally {
        if (!cancelled) setLoading(false);
      }
    };

    run();
    return () => {
      cancelled = true;
      timersRef.current.forEach(id => clearTimeout(id));
      timersRef.current = [];
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [rolesKey, navigate, location.pathname, autoRedirect, redirectDelayMs, redirectTo.unauthorized, redirectTo.forbidden]);

  const allowed =
    !!user &&
    (allowedRoles.length === 0 ||
      allowedRoles.map(r => r.toLowerCase()).includes(String(user.role ?? "").toLowerCase()));

  // ‚úÖ ‡∏Ñ‡∏∑‡∏ô logout ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°/‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
  return { loading, allowed, user, status, logout };
}
