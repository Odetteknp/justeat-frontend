// src/pages/CartPage.tsx
import React, { useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../state/CartContext';
import './CartPage.css';

// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô THB (‡πÑ‡∏°‡πà‡∏õ‡∏±‡∏î‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°)
const fmtTHB = (n: number) =>
  new Intl.NumberFormat('th-TH', {
    style: 'currency',
    currency: 'THB',
    maximumFractionDigits: 0,
  }).format(n);

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
type PaymentMethod = 'promptpay' | 'credit' | 'cod';

export default function CartPage() {
  const cart = useCart();
  const navigate = useNavigate();

  // ---------- Promo code ----------
  const [promoCode, setPromoCode] = useState('');
  const [appliedCode, setAppliedCode] = useState<string | null>(null);

  // ---------- Address ----------
  const [addressId, setAddressId] = useState<string>('addr1');
  const [newAddress, setNewAddress] = useState('');

  // ---------- Payment ----------
  const [payment, setPayment] = useState<PaymentMethod | null>(null);

  // ---------- Pricing ----------
  const subtotal = cart.totalAmount; // ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  const baseDelivery = 15; // ‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î/‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á/‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏î‡πâ‡∏ß‡∏¢ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô re-render ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  const { discount, deliveryFee, total } = useMemo(() => {
    let discountVal = 0;
    let delivery = baseDelivery;

    if (appliedCode) {
      const code = appliedCode.trim().toUpperCase();
      if (code === 'SAVE10') {
        discountVal = Math.round(subtotal * 0.1);
      } else if (code === 'SAVE50') {
        discountVal = 50;
      } else if (code === 'SHIPFREE') {
        delivery = 0;
      }
    }
    if (discountVal > subtotal) discountVal = subtotal; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏•‡∏ö
    const t = subtotal - discountVal + delivery;
    return { discount: discountVal, deliveryFee: delivery, total: t };
  }, [appliedCode, subtotal]);

  // ---------- Promo code handlers ----------
  const applyCode = () => {
    const c = promoCode.trim();
    if (!c) return;
    setAppliedCode(c);
  };
  const clearCode = () => {
    setAppliedCode(null);
    setPromoCode('');
  };

  // ---------- Helpers ----------
  // ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà" ‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏≤‡∏ß‡∏û‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
  const hasAddress =
    (addressId && addressId !== 'new') ||
    (addressId === 'new' && newAddress.trim().length > 8);

  // ‡∏õ‡∏∏‡πà‡∏° Checkout ‡∏à‡∏∞‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠: ‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà + ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  const canCheckout = cart.items.length > 0 && hasAddress && !!payment;

  const onCheckout = () => {
    if (!canCheckout) return;
    // ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö payment gateway / API ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ
    alert('‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞ üß°');
    cart.clear();
    navigate('/');
  };

  return (
    <div className="container">
      <h2 className="pageTitle">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2>

      {cart.items.length === 0 ? (
        <>
          <p className="emptyText">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>
          <button onClick={() => navigate('/')} className="btnPlain">
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π
          </button>
        </>
      ) : (
        <div className="grid">
          {/* LEFT: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ */}
          <div>
            <div className="card">
              <div className="cardHead">
                <strong>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</strong>
                <button onClick={() => cart.clear()} className="btnDanger">
                  ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                </button>
              </div>

              <ul className="listReset">
  {cart.items.map((line) => (
    <li key={line.id} className="cartLine">
      <img src={line.item.image} alt={line.item.name} className="itemImage" />
      <div className="lineBody">
        <div className="itemName">{line.item.name}</div>
        <div className="itemMeta">
          {Object.entries(line.selected).map(([optId, choiceIds], idx) => {
            if (!Array.isArray(choiceIds)) return null;
            const opt = line.item.options?.find(o => o.id === optId);
            const names = choiceIds
              .map(cid => opt?.choices.find(c => c.id === cid)?.name ?? cid);
            return (
              <span key={optId} className="itemMetaChip">
                {idx ? ' | ' : ''}
                {names.join(', ')}
              </span>
            );
          })}
          {line.note ? ` ‚Ä¢ ${line.note}` : null}
        </div>
      </div>
      <div className="qty">√ó {line.quantity}</div>
      <div className="lineTotal">{fmtTHB(line.total)}</div>
      <button
        onClick={() => cart.removeItem(line.id)}
        className="btnPlain"
      >
        ‡∏•‡∏ö
      </button>
    </li>
  ))}
</ul>


              <div className="actionsRow">
                <button onClick={() => navigate(-1)} className="btnPlain">
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡πà‡∏≠
                </button>
              </div>
            </div>
          </div>

          {/* RIGHT: ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤ + ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á + ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà + ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
          <div className="rightCol">
            {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤ */}
            <div className="card">
              <strong className="blockTitle">‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤</strong>
              <Row label="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°" value={fmtTHB(subtotal)} />
              <Row label="‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î" value={`‚àí ${fmtTHB(discount)}`} />
              <Row label="‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á" value={fmtTHB(deliveryFee)} />
              <div className="hr" />
              <Row
                label={<span className="totalLabel">‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥</span>}
                value={<span className="totalValue">{fmtTHB(total)}</span>}
              />
            </div>

            {/* ‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô */}
            <div className="card">
              <strong className="blockTitle">‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</strong>
              <div className="inlineFields">
                <input
                  value={appliedCode ? appliedCode : promoCode}
                  onChange={(e) =>
                    appliedCode
                      ? setAppliedCode(e.target.value)
                      : setPromoCode(e.target.value)
                  }
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô SAVE10 / SAVE50 / SHIPFREE"
                  className="input"
                  aria-label="‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô"
                />
                {appliedCode ? (
                  <button onClick={clearCode} className="btnPlain">
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                ) : (
                  <button onClick={applyCode} className="btnPrimary">
                    ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î
                  </button>
                )}
              </div>
              <div className="helpText">
                ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: <code>SAVE10</code> ‡∏•‡∏î 10% ‚Ä¢ <code>SAVE50</code> ‡∏•‡∏î 50‡∏ø ‚Ä¢{' '}
                <code>SHIPFREE</code> ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ
              </div>
            </div>

            {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á */}
            <div className="card">
              <strong className="blockTitle">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</strong>
              <div className="vStack">
                <label className="radioRow">
                  <input
                    type="radio"
                    name="addr"
                    checked={addressId === 'addr1'}
                    onChange={() => setAddressId('addr1')}
                  />
                  <span>‡∏ö‡πâ‡∏≤‡∏ô: 99/99 ‡∏ñ.‡∏™‡∏∏‡∏Ç‡∏™‡∏ö‡∏≤‡∏¢ ‡πÅ‡∏Ç‡∏ß‡∏á‡∏™‡∏î‡πÉ‡∏™ ‡πÄ‡∏Ç‡∏ï‡∏≠‡∏¥‡πà‡∏°‡πÉ‡∏à ‡∏Å‡∏ó‡∏°. 10110</span>
                </label>
                <label className="radioRow">
                  <input
                    type="radio"
                    name="addr"
                    checked={addressId === 'addr2'}
                    onChange={() => setAddressId('addr2')}
                  />
                  <span>‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: 123 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ABC ‡∏ä‡∏±‡πâ‡∏ô 12 ‡∏ñ.‡∏û‡∏´‡∏•‡πÇ‡∏¢‡∏ò‡∏¥‡∏ô ‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£ ‡∏Å‡∏ó‡∏°. 10900</span>
                </label>
                <label className="radioRow">
                  <input
                    type="radio"
                    name="addr"
                    checked={addressId === 'new'}
                    onChange={() => setAddressId('new')}
                  />
                  <span>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà</span>
                </label>
                {addressId === 'new' && (
                  <textarea
                    value={newAddress}
                    onChange={(e) => setNewAddress(e.target.value)}
                    placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà..."
                    className={`$"input" $"textarea"`}
                    aria-label="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà"
                  />
                )}
              </div>
            </div>

            {/* ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô */}
            <div className="card">
              <strong className="blockTitle">‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</strong>
              <div className="vStack">
                <label className="radioRow">
                  <input
                    type="radio"
                    name="pay"
                    checked={payment === 'promptpay'}
                    onChange={() => setPayment('promptpay')}
                  />
                  <span>‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå (PromptPay)</span>
                </label>
                <label className="radioRow">
                  <input
                    type="radio"
                    name="pay"
                    checked={payment === 'credit'}
                    onChange={() => setPayment('credit')}
                  />
                  <span>‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡πÄ‡∏î‡∏ö‡∏¥‡∏ï</span>
                </label>
                <label className="radioRow">
                  <input
                    type="radio"
                    name="pay"
                    checked={payment === 'cod'}
                    onChange={() => setPayment('cod')}
                  />
                  <span>‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á</span>
                </label>
              </div>
            </div>

            <button
              onClick={onCheckout}
              disabled={!canCheckout}
              className={`$"btnPrimary" $"checkoutBtn"`}
              aria-disabled={!canCheckout}
              aria-label={`‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ ${fmtTHB(total)}`}
            >
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‚Ä¢ {fmtTHB(total)}
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

/** ‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤ (label / value) */
function Row({ label, value }: { label: React.ReactNode; value: React.ReactNode }) {
  return (
    <div className="row">
      <div>{label}</div>
      <div>{value}</div>
    </div>
  );
}