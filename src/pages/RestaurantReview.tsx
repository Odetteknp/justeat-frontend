// src/pages/RestaurantReview.tsx
import React, { useMemo, useState } from "react";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import "./RestaurantReview.css";
import chefImage from "../assets/image/chef.png";
import { getToken } from "../services/tokenStore"; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

type NavState = {
  orderId?: number;
  restaurantId?: number;
  restaurantName?: string;
};

const API_URL = import.meta.env.VITE_API_URL ?? "http://localhost:8000";

export default function RestaurantReview() {
  const navigate = useNavigate();
  const { restaurantId: restaurantIdParam } = useParams<{ restaurantId: string }>();
  const { state } = useLocation() as { state?: NavState };

  // ---- derive data from params/state ----
  const restaurantId = useMemo(
    () => Number(restaurantIdParam ?? state?.restaurantId ?? 0) || 0,
    [restaurantIdParam, state?.restaurantId]
  );
  const restaurantName = state?.restaurantName ?? (restaurantId ? `‡∏£‡πâ‡∏≤‡∏ô #${restaurantId}` : "‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
  const orderId = state?.orderId; // üî¥ ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backend ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

  // ---- local states ----
  const [rating, setRating] = useState<number>(0);
  const [comment, setComment] = useState("");   // optional
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ orderId ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á (‡πÄ‡∏û‡∏£‡∏≤‡∏∞ API ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ)
  const missingOrderMsg = !orderId
    ? "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ (‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ï‡∏≤‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå)"
    : null;

  const canSubmit = !!orderId && rating > 0 && !submitting;

  // ---- submit handler ----
  const submit = async () => {
    setError(null);
    if (!canSubmit) return;

    try {
      setSubmitting(true);

      // ‚úÖ payload ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend: Create review expects { orderId, rating, comments }
      const payload: Record<string, any> = {
        orderId,                // required by backend
        rating,                 // required by backend (1..5)
        ...(comment.trim() ? { comments: comment.trim() } : {}), // ‡∏û‡∏´‡∏π‡∏û‡∏à‡∏ô‡πå‡∏ï‡∏≤‡∏° backend
      };

      const headers: HeadersInit = { "Content-Type": "application/json" };
      const token = getToken?.();
      if (token) headers["Authorization"] = `Bearer ${token}`;

      const res = await fetch(`${API_URL}/reviews`, {
        method: "POST",
        headers,
        body: JSON.stringify(payload),
      });

      if (!res.ok) {
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á error ‡∏ó‡∏µ‡πà backend ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
        let message = `HTTP ${res.status}`;
        try {
          const txt = await res.text();
          if (txt) {
            // backend ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á { ok:false, error:"..." } ‡∏´‡∏£‡∏∑‡∏≠ text ‡∏ï‡∏£‡∏á ‡πÜ
            try {
              const j = JSON.parse(txt);
              message = j?.error || txt || message;
            } catch {
              message = txt || message;
            }
          }
        } catch {}
        throw new Error(message);
      }

      // ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏ß‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡πâ‡∏≤‡∏ô
      navigate(`/restaurants/${restaurantId || ""}/reviews`, { replace: true });
    } catch (e: any) {
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á error ‡∏à‡∏≤‡∏Å backend:
      // - "order not found or not belong to user"
      // - "owners cannot review their own restaurant"
      // - "order is not in a reviewable status"
      setError(e?.message ?? "‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="rr">
      <header className="rr__header">
        <h1 className="rr__title">‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h1>
        <button className="rr__close" onClick={() => navigate(-1)} aria-label="‡∏õ‡∏¥‡∏î">√ó</button>
      </header>

      <section className="rr__card">
        <div className="rr__row">
          <div className="rr__image"><img src={chefImage} alt="" /></div>

          <div className="rr__field">
            <div className="rr__label">
              ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {restaurantName}{orderId ? ` (‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #${orderId})` : ""}
            </div>
            <div className="rr__stars" role="radiogroup" aria-label="‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô">
              {[1, 2, 3, 4, 5].map((n) => (
                <button
                  key={n}
                  type="button"
                  className={`rr__star ${n <= rating ? "is-active" : ""}`}
                  aria-pressed={n <= rating}
                  onClick={() => setRating(n)}
                >
                  ‚òÖ
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö) */}
        <div className="rr__row">
          <label className="rr__label" htmlFor="comment">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
          <textarea
            id="comment"
            className="rr__commentBox"
            placeholder="‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡πá‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‚Ä¶ (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ)"
            value={comment}
            onChange={(e) => setComment(e.target.value)}
            rows={5}
          />
        </div>

        {/* ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ orderId */}
        {missingOrderMsg && <div className="rr__error">{missingOrderMsg}</div>}
        {error && <div className="rr__error">{error}</div>}

        <div className="rr__actions">
          <button className="rr__btn rr__btn--secondary" onClick={() => navigate(-1)} disabled={submitting}>
            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
          </button>
          <button
            className="rr__btn rr__btn--primary"
            onClick={submit}
            disabled={!canSubmit}
            aria-disabled={!canSubmit}
          >
            {submitting ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á..." : "‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß"}
          </button>
        </div>
      </section>
    </div>
  );
}
