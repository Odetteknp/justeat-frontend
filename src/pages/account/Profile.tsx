import React, { useEffect, useState, useCallback } from "react";
import { Form, message } from "antd";
import { useAuthGuard } from "../../hooks/useAuthGuard";
import { getAvatarBase64, updateProfile, uploadAvatarBase64 } from "../../services/user";
import "./Profile.css";

import PageHeader from "../../components/account/PageHeader";
import AvatarCard from "../../components/account/AvatarCard";
import ProfileForm from "../../components/account/ProfileForm";
import type { UserProfile } from "../../types";

const MOCK_USER: UserProfile = {
  username: "gowit123",
  email: "gowit@example.com",
  firstName: "‡πÇ‡∏Å‡∏ß‡∏¥‡∏ó",
  lastName: "‡∏†‡∏π‡∏≠‡πà‡∏≤‡∏á",
  phoneNumber: "0812345678",
  address: "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
  role: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
  avatarBase64: "https://i.pravatar.cc/150?img=3", // ‚úÖ fallback URL
};

type ProfileUpdateDTO = {
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  address?: string;
};

export default function ProfilePage() {
  const { loading, allowed, user } = useAuthGuard([], {
    autoRedirect: true,
    redirectDelayMs: 0,
    redirectTo: { unauthorized: "/login", forbidden: "/" },
  });

  const [form] = Form.useForm<UserProfile>();
  const [submitting, setSubmitting] = useState(false);
  const [isFetching, setIsFetching] = useState(true);
  const [avatarSrc, setAvatarSrc] = useState<string | undefined>(); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  // ‡πÇ‡∏´‡∏•‡∏î profile + avatar
  useEffect(() => {
    if (loading || !allowed) return;

    const initial: UserProfile = {
      username: (user as any)?.username ?? MOCK_USER.username,
      email: user?.email ?? "",
      firstName: user?.firstName ?? "",
      lastName: user?.lastName ?? "",
      phoneNumber: user?.phoneNumber ?? "",
      address: user?.address ?? "",
      role: user?.role ?? "customer",
      avatarBase64: user?.avatarBase64 ?? MOCK_USER.avatarBase64,
    };
    form.setFieldsValue(initial as any);

    getAvatarBase64()
      .then((b64) => {
        if (b64) setAvatarSrc(b64);
        else setAvatarSrc(MOCK_USER.avatarBase64);
      })
      .catch(() => setAvatarSrc(MOCK_USER.avatarBase64))
      .finally(() => setIsFetching(false));
  }, [loading, allowed, user, form]);

  // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà ‚Üí preview
  const handleSelectFile = (file: File) => {
    console.log("üìÇ handleSelectFile ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå:", file.name, file.size, file.lastModified);
    setSelectedFile(file);
    const previewUrl = URL.createObjectURL(file);
    setAvatarSrc(previewUrl); // ‡πÅ‡∏™‡∏î‡∏á preview ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  };

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ (Base64)
  const handleSaveAvatar = async () => {
    if (!selectedFile) {
      message.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô");
      return;
    }
    console.log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° convert file -> base64", selectedFile);

    const reader = new FileReader();

    reader.onloadend = async () => {
      const base64 = reader.result as string;
      console.log("üì¶ base64 data (preview)", base64.substring(0, 50));

      try {
        const updated = await uploadAvatarBase64(base64);
        console.log("‚úÖ response ‡∏à‡∏≤‡∏Å backend:", updated);

        setAvatarSrc(updated.avatarBase64); // ‡πÉ‡∏ä‡πâ state ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        setSelectedFile(null);
        message.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      } catch (e: any) {
        console.error("‚ùå upload error:", e);
        message.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    };

    reader.onerror = (err) => {
      console.error("‚ùå FileReader error:", err);
    };

    reader.readAsDataURL(selectedFile); // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
  };


  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  const handleSaveProfile = useCallback(
    async (values: UserProfile) => {
      setSubmitting(true);
      try {
        const payload: ProfileUpdateDTO = {
          firstName: values.firstName,
          lastName: values.lastName,
          phoneNumber: values.phoneNumber,
          address: values.address,
        };

        const refreshed = await updateProfile(payload);
        form.setFieldsValue(refreshed);

        message.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      } catch (e: any) {
        message.error(
          e?.response?.data?.error || "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        );
      } finally {
        setSubmitting(false);
      }
    },
    [form]
  );

  if (!allowed) return null;

  return (
    <div className="profile-page">
      <PageHeader />
      <div className="content-grid">
        <AvatarCard
          isLoading={isFetching}
          avatarSrc={avatarSrc || MOCK_USER.avatarBase64} // ‚úÖ ‡πÉ‡∏ä‡πâ avatarSrc
          role={form.getFieldValue("role")}
          email={form.getFieldValue("email")}
          onSelectFile={handleSelectFile}
          onSaveAvatar={handleSaveAvatar}
        />
        <ProfileForm
          form={form}
          isLoading={isFetching}
          submitting={submitting}
          onSubmit={handleSaveProfile}
        />
      </div>
    </div>
  );
}
