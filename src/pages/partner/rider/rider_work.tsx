// src/pages/rider/RiderWork.tsx
import React, { useEffect, useState } from "react";
import { riderWorkApi, type AvailableOrder } from "../../../services/riderWorkApi";
import {
  Card,
  Row,
  Col,
  Spin,
  Button,
  Avatar,
  Typography,
  message,
  Tag,
  Space,
  Divider,
  List,
  Statistic,
  Drawer,
} from "antd";
import {
  PlayCircleOutlined,
  PauseCircleOutlined,
  CheckCircleOutlined,
  ThunderboltOutlined,
  DingdingOutlined,
  FieldTimeOutlined,
} from "@ant-design/icons";

const { Title, Text } = Typography;

type RiderWorkStatus = "ASSIGNED" | "COMPLETED";
type CurrentWork = {
  orderId: number;
  status: RiderWorkStatus;
  // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏≤‡∏Å available list
  restaurantName?: string;
  customerName?: string;
  address?: string;
  total?: number;
  createdAt?: string;
};

function StatusTag({ code }: { code: RiderWorkStatus }) {
  switch (code) {
    case "ASSIGNED":
      return <Tag color="blue">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</Tag>;
    case "COMPLETED":
      return <Tag color="green">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</Tag>;
    default:
      return null;
  }
}

function THB(n?: number) {
  if (typeof n !== "number") return "-";
  return new Intl.NumberFormat("th-TH", { style: "currency", currency: "THB", maximumFractionDigits: 0 }).format(n);
}

export default function RiderWork() {
  const [isWorking, setIsWorking] = useState(false);
  const [currentWork, setCurrentWork] = useState<CurrentWork | null>(null);
  const [available, setAvailable] = useState<AvailableOrder[]>([]);
  const [loading, setLoading] = useState(false);       // ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å
  const [listLoading, setListLoading] = useState(false); // ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏á‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏á
  const [detailOpen, setDetailOpen] = useState(false);
  const [messageApi, contextHolder] = message.useMessage();

  const refreshAvailable = async () => {
    try {
      setListLoading(true);
      const items = await riderWorkApi.getAvailable();
      setAvailable(items);
    } catch (e: any) {
      messageApi.error(e?.response?.data?.error || "‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setListLoading(false);
    }
  };

  const toggleWorking = async () => {
    try {
      setLoading(true);
      if (isWorking) {
        await riderWorkApi.setAvailability("OFFLINE");
        setIsWorking(false);
        setAvailable([]);
        messageApi.warning("‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏Å‡∏á‡∏≤‡∏ô");
      } else {
        await riderWorkApi.setAvailability("ONLINE");
        setIsWorking(true);
        messageApi.success("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô üöÄ");
        await refreshAvailable();
      }
    } catch (e: any) {
      messageApi.error(e?.response?.data?.error || "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setLoading(false);
    }
  };

  // ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏û‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏° ‡πÜ ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ä‡∏ß‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
  const handleAccept = async (it: AvailableOrder) => {
    try {
      setLoading(true);
      await riderWorkApi.accept(it.id);
      setCurrentWork({
        orderId: it.id,
        status: "ASSIGNED",
        restaurantName: it.restaurantName,
        customerName: it.customerName,
        address: it.address,
        total: it.total,
        createdAt: it.createdAt,
      });
      setAvailable((prev) => prev.filter((x) => x.id !== it.id));
      messageApi.success(`‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô #${it.id} ‡πÅ‡∏•‡πâ‡∏ß`);
      setDetailOpen(true); // ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    } catch (e: any) {
      messageApi.error(e?.response?.data?.error || "‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      refreshAvailable(); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏ô‡πÅ‡∏¢‡πà‡∏á‡∏á‡∏≤‡∏ô
    } finally {
      setLoading(false);
    }
  };

  const handleComplete = async () => {
    if (!currentWork) return;
    try {
      setLoading(true);
      await riderWorkApi.complete(currentWork.orderId);
      messageApi.success(`‡∏á‡∏≤‡∏ô #${currentWork.orderId} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‚úÖ`);
      setCurrentWork(null);
      setDetailOpen(false);
      if (isWorking) refreshAvailable();
    } catch (e: any) {
      messageApi.error(e?.response?.data?.error || "‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (isWorking && !currentWork) {
      refreshAvailable();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isWorking, currentWork]);

  return (
    <div style={{ backgroundColor: "white", height: "100%", width: "100%", paddingBottom: 32 }}>
      {contextHolder}

      {/* Header card ‡πÄ‡∏î‡∏¥‡∏° */}
      <Card style={{ background: "rgb(239, 102, 75)", color: "white", marginBottom: 24, borderRadius: 16 }}>
        <Row align="middle" gutter={24}>
          <Col>
            <Avatar size={64} icon={<DingdingOutlined />} style={{ backgroundColor: "rgba(255, 255, 255, 0.2)" }} />
          </Col>
          <Col flex="1">
            <Title level={2} style={{ color: "white", margin: 0 }}>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á üõµ</Title>
            <Text style={{ color: "rgba(255, 255, 255, 0.95)", fontSize: 16 }}>
              {isWorking ? "‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏á‡∏≤‡∏ô)" : "‡∏Å‡∏î ‚Äú‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå"}
            </Text>
          </Col>
          <Col>
            <Button
              onClick={toggleWorking}
              type="primary"
              size="large"
              icon={isWorking ? <PauseCircleOutlined /> : <PlayCircleOutlined />}
              loading={loading}
              style={{
                fontSize: 18,
                background: isWorking ? "rgb(232, 81, 81)" : "rgb(64, 212, 106)",
                border: "1px solid rgba(255, 255, 255, 0.3)",
                borderRadius: 8,
              }}
            >
              {isWorking ? "‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" : "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"}
            </Button>
          </Col>
        </Row>
      </Card>

      <Spin spinning={loading} size="large">
        <div style={{ maxWidth: 920, margin: "0 auto", padding: "0 16px" }}>
          {/* ‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
          {currentWork ? (
            <Card
              title={
                <Space>
                  <ThunderboltOutlined />
                  <span>‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</span>
                  <StatusTag code={currentWork.status} />
                </Space>
              }
              bordered
              style={{ borderRadius: 14, marginBottom: 16 }}
              extra={
                <Space>
                  <Button onClick={() => setDetailOpen(true)}>‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</Button>
                  <Button type="primary" icon={<CheckCircleOutlined />} onClick={handleComplete} disabled={loading}>
                    ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                  </Button>
                </Space>
              }
            >
              <Row gutter={[16, 8]}>
                <Col span={24}>
                  <Space wrap>
                    <Tag>Order: {currentWork.orderId}</Tag>
                    {currentWork.restaurantName && <Tag color="purple">{currentWork.restaurantName}</Tag>}
                    {currentWork.customerName && <Tag color="cyan">{currentWork.customerName}</Tag>}
                  </Space>
                </Col>
                <Col span={24}>
                  <Divider style={{ margin: "8px 0" }} />
                  <Space direction="vertical" size={4}>
                    {currentWork.address && <Text>‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: {currentWork.address}</Text>}
                    <Text type="secondary">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {currentWork.status}</Text>
                    {currentWork.createdAt && (
                      <Text type="secondary">‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(currentWork.createdAt).toLocaleString()}</Text>
                    )}
                  </Space>
                </Col>
              </Row>
            </Card>
          ) : (
            // ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå + ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ -> ‡πÅ‡∏™‡∏î‡∏á "‡∏á‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏á"
            isWorking ? (
              <Card style={{ borderRadius: 14 }}>
                <Row align="middle" justify="space-between" style={{ marginBottom: 8 }}>
                  <Col><Title level={4} style={{ margin: 0 }}>‡∏á‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏á</Title></Col>
                  <Col>
                    <Button icon={<FieldTimeOutlined />} onClick={refreshAvailable} loading={listLoading}>
                      ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
                    </Button>
                  </Col>
                </Row>

                <List
                  loading={listLoading}
                  dataSource={available}
                  locale={{ emptyText: "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏á" }}
                  renderItem={(it) => (
                    <List.Item
                      key={it.id}
                      actions={[
                        <Button type="primary" onClick={() => handleAccept(it)} disabled={loading}>
                          ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
                        </Button>,
                      ]}
                    >
                      <List.Item.Meta
                        title={
                          <Space size={8} wrap>
                            <Tag>#{it.id}</Tag>
                            <strong>{it.restaurantName}</strong>
                            <span>‚Üí {it.customerName}</span>
                          </Space>
                        }
                        description={
                          <Space direction="vertical" size={2}>
                            {it.address && <Text type="secondary">{it.address}</Text>}
                            <Text type="secondary">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(it.createdAt).toLocaleString()}</Text>
                          </Space>
                        }
                      />
                      <Statistic value={it.total} title="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°" formatter={(v) => THB(Number(v))} />
                    </List.Item>
                  )}
                />
              </Card>
            ) : (
              <Card style={{ borderRadius: 14 }}>
                <Text style={{ fontSize: 16 }}>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô ‡∏Å‡∏î ‚Äú‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</Text>
              </Card>
            )
          )}
        </div>
      </Spin>

      {/* Drawer ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
      <Drawer
        title={`‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô #${currentWork?.orderId ?? ""}`}
        open={detailOpen}
        onClose={() => setDetailOpen(false)}
        width={420}
      >
        {currentWork ? (
          <Space direction="vertical" size="middle" style={{ width: "100%" }}>
            <div>
              <Text strong>‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£: </Text>
              <Text>{currentWork.restaurantName ?? "-"}</Text>
            </div>
            <div>
              <Text strong>‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: </Text>
              <Text>{currentWork.customerName ?? "-"}</Text>
            </div>
            <div>
              <Text strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: </Text>
              <Text>{currentWork.address ?? "-"}</Text>
            </div>
            <div>
              <Text strong>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: </Text>
              <Text>{THB(currentWork.total)}</Text>
            </div>
            <div>
              <Text type="secondary">
                ‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠: {currentWork.createdAt ? new Date(currentWork.createdAt).toLocaleString() : "-"}
              </Text>
            </div>

            {/* NOTE:
              ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π" ‡∏î‡πâ‡∏ß‡∏¢
              - ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡πÉ‡∏ä‡πâ endpoint ‡∏ù‡∏±‡πà‡∏á Rider ‡πÄ‡∏ä‡πà‡∏ô GET /rider/works/:orderId/detail
                ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô items ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ
              - ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Drawer ‡∏ô‡∏µ‡πâ
            */}
          </Space>
        ) : (
          <Text type="secondary">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</Text>
        )}
      </Drawer>
    </div>
  );
}
