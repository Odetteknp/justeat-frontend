import React, { useEffect, useMemo, useRef, useState } from "react";
import { useRider } from "../../../../context/RiderContext";
import { riderWorkApi } from "../../../../services/riderWorkApi";
import {
  Card,
  Row,
  Col,
  Spin,
  Button,
  Avatar,
  Typography,
  message,
  Tag,
  Space,
  Divider,
  Badge,
} from "antd";
import {
  UserOutlined,
  PlayCircleOutlined,
  PauseCircleOutlined,
  CheckCircleOutlined,
  FieldTimeOutlined,
  ThunderboltOutlined,
} from "@ant-design/icons";
// import axios from "axios"; // <- ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° backend ‡∏à‡∏£‡∏¥‡∏á

const { Title, Text } = Typography;

/** ========= Types & Status ========= */
type RiderWorkStatusCode =
  | "QUEUED"        // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢)
  | "ASSIGNED"      // ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°
  | "IN_PROGRESS"   // ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  | "COMPLETED"     // ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  | "CANCELLED";    // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å

type RiderWork = {
  id: number;
  created_at: string;  // from gorm.Model
  updated_at: string;
  deleted_at?: string | null;
  work_at?: string | null;
  finish_at?: string | null;
  order_id: number;    // FK
  rider_id: number;    // FK (‡∏õ‡∏Å‡∏ï‡∏¥‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å auth/me)
  rider_work_status_id: number; // FK -> ‡∏ï‡∏≤‡∏£‡∏≤‡∏á status
  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend ‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡πá‡∏ö code & label ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á
  status_code: RiderWorkStatusCode;
  status_label: string;

  // ---- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏ä‡∏ß‡πå (‡∏°‡∏≤‡∏à‡∏≤‡∏Å join order) ----
  order_code?: string;
  customer_name?: string;
  restaurant_name?: string;
  pickup_address?: string;
  dropoff_address?: string;
  estimate_distance_km?: number;
  estimate_fee?: number;
};

/** ========= Mock Service (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô axios ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ) ========= */
// ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î endpoint ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï:
// GET    /api/rider/works/active              -> ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà 0..1
// POST   /api/rider/works/pull-next           -> ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (assign ‡πÉ‡∏´‡πâ‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå)
// POST   /api/rider/works/:id/start           -> ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô IN_PROGRESS + set work_at
// POST   /api/rider/works/:id/complete        -> ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô COMPLETED + set finish_at
// GET    /api/rider/works/queue-count         -> ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö badge ‡πÄ‡∏•‡πá‡∏Å ‡πÜ)
// * ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£ auth ‡∏î‡πâ‡∏ß‡∏¢ token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏π‡πâ rider_id ‡∏ù‡∏±‡πà‡∏á server

const mockQueue: RiderWork[] = [
  {
    id: 101,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    order_id: 5001,
    rider_id: 1,
    rider_work_status_id: 1,
    status_code: "ASSIGNED",
    status_label: "‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
    order_code: "ORD-5001",
    customer_name: "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠",
    restaurant_name: "‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡πÑ‡∏ü‡∏•‡∏∏‡∏Å",
    pickup_address: "‡∏ã‡∏≠‡∏¢ A ‡πÄ‡∏Ç‡∏ï B",
    dropoff_address: "‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î C ‡∏ä‡∏±‡πâ‡∏ô 12",
    estimate_distance_km: 5.3,
    estimate_fee: 42,
  },
  {
    id: 102,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    order_id: 5002,
    rider_id: 1,
    rider_work_status_id: 1,
    status_code: "ASSIGNED",
    status_label: "‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
    order_code: "ORD-5002",
    customer_name: "‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏µ",
    restaurant_name: "‡∏Ç‡πâ‡∏≤‡∏ß‡∏°‡∏±‡∏ô‡πÑ‡∏Å‡πà‡∏õ‡πâ‡∏≤‡∏®‡∏£‡∏µ",
    pickup_address: "‡∏ï‡∏•‡∏≤‡∏î X",
    dropoff_address: "‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô Y",
    estimate_distance_km: 3.2,
    estimate_fee: 35,
  },
];

const mockApi = {
  getActive: async (): Promise<RiderWork | null> => {
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
    return null;
  },
  pullNext: async (): Promise<RiderWork | null> => {
    await new Promise((r) => setTimeout(r, 400));
    const next = mockQueue.shift() || null;
    return next;
  },
  startWork: async (id: number): Promise<void> => {
    await new Promise((r) => setTimeout(r, 250));
  },
  completeWork: async (id: number): Promise<void> => {
    await new Promise((r) => setTimeout(r, 300));
  },
  getQueueCount: async (): Promise<number> => {
    return mockQueue.length;
  },
};

/** ========= UI Helpers ========= */
function StatusTag({ code }: { code: RiderWorkStatusCode }) {
  switch (code) {
    case "ASSIGNED":
      return <Tag color="blue">‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß</Tag>;
    case "IN_PROGRESS":
      return <Tag color="gold">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</Tag>;
    case "COMPLETED":
      return <Tag color="green">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</Tag>;
    case "CANCELLED":
      return <Tag color="red">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Tag>;
    default:
      return <Tag>‡∏£‡∏≠‡∏Ñ‡∏¥‡∏ß</Tag>;
  }
}

const RiderWork: React.FC = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const { isWorking, setWorking, currentWork, setCurrentWork, queueCount, setQueueCount } = useRider();
  const [messageApi, contextHolder] = message.useMessage();

  const pollingRef = useRef<number | null>(null);
  const isPullingRef = useRef<boolean>(false);

  const canPullMore = useMemo(() => isWorking && !currentWork, [isWorking, currentWork]);

  const refreshQueueCount = async () => {
    try { setQueueCount(await riderWorkApi.getQueueCount()); } catch {}
  };

  const pullNextIfAny = async () => {
    if (!canPullMore || isPullingRef.current) return;
    isPullingRef.current = true;
    try {
      setLoading(true);
      const work = await riderWorkApi.pullNext();
      if (work) {
        setCurrentWork(work);
        messageApi.info("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß!");
      }
      await refreshQueueCount();
    } catch { messageApi.error("‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); }
    finally { setLoading(false); isPullingRef.current = false; }
  };

  const handleToggleWorking = async () => {
    if (isWorking) {
      setWorking(false);
      messageApi.warning("‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏Å‡∏á‡∏≤‡∏ô");
    } else {
      setWorking(true);
      messageApi.success("‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô üöÄ");
    }
  };

  const handleStart = async () => {
    if (!currentWork) return;
    try {
      setLoading(true);
      await riderWorkApi.startWork(currentWork.id);
      setCurrentWork({
        ...currentWork,
        status_code: "IN_PROGRESS",
        status_label: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á",
        work_at: new Date().toISOString(),
      });
      messageApi.success("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
    } catch { messageApi.error("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); }
    finally { setLoading(false); }
  };

  const handleComplete = async () => {
    if (!currentWork) return;
    try {
      setLoading(true);
      await riderWorkApi.completeWork(currentWork.id);
      messageApi.success(`‡∏á‡∏≤‡∏ô #${currentWork.order_code || currentWork.id} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‚úÖ`);
      setCurrentWork(null); // ‡πÉ‡∏´‡πâ polling ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡πÄ‡∏≠‡∏á
      await refreshQueueCount();
    } catch { messageApi.error("‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"); }
    finally { setLoading(false); }
  };

  useEffect(() => { // ‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á + ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏¥‡∏ß ‡∏ï‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏û‡∏à
    (async () => {
      setLoading(true);
      try {
        const active = await riderWorkApi.getActive();
        setCurrentWork(active);
        await refreshQueueCount();
      } finally { setLoading(false); }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => { // polling
    if (pollingRef.current) { clearInterval(pollingRef.current); pollingRef.current = null; }
    if (isWorking && !currentWork) {
      pullNextIfAny(); // ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      pollingRef.current = window.setInterval(() => { pullNextIfAny(); }, 3000);
    }
    return () => { if (pollingRef.current) { clearInterval(pollingRef.current); pollingRef.current = null; } };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isWorking, currentWork]);

  return (
    <div
      style={{
        backgroundColor: "white",
        height: "100%", // ‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏à‡∏£‡∏¥‡∏á
        width: "100%",
        paddingBottom: 32,
      }}
    >
      {contextHolder}
      <Card
        style={{
          background: "rgb(54, 164, 197)",
          color: "white",
          marginBottom: 24,
          borderRadius: 16,
        }}
      >
        <Row align="middle" gutter={24}>
          <Col>
            <Avatar
              size={64}
              icon={<UserOutlined />}
              style={{ backgroundColor: "rgba(255, 255, 255, 0.2)" }}
            />
          </Col>

          <Col flex="1">
            <Title level={2} style={{ color: "white", margin: 0 }}>
              ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á üõµ
            </Title>
            <Text style={{ color: "rgba(255, 255, 255, 0.95)", fontSize: 16 }}>
              {isWorking
                ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‚Ä¶ (‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 1 ‡∏á‡∏≤‡∏ô)"
                : "‡∏Å‡∏î ‚Äú‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"}
            </Text>
          </Col>

          <Col>
            <Space>
              <Badge count={queueCount} title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠" offset={[0, 8]}>
                <Button
                  onClick={handleToggleWorking}
                  type="primary"
                  size="large"
                  icon={isWorking ? <PauseCircleOutlined /> : <PlayCircleOutlined />}
                  style={{
                    fontSize: 18,
                    background: isWorking ? "rgb(232, 81, 81)" : "rgb(64, 212, 106)",
                    border: "1px solid rgba(255, 255, 255, 0.3)",
                    borderRadius: 8,
                  }}
                >
                  {isWorking ? "‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" : "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"}
                </Button>
              </Badge>
            </Space>
          </Col>
        </Row>
      </Card>

      <div style={{ maxWidth: 920, margin: "0 auto", padding: "0 16px" }}>
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) */}
        {currentWork ? (
          <Card
            title={
              <Space>
                <ThunderboltOutlined />
                <span>‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</span>
                <StatusTag code={currentWork.status_code} />
              </Space>
            }
            bordered
            style={{ borderRadius: 14 }}
            extra={
              <Space>
                {currentWork.status_code === "ASSIGNED" && (
                  <Button
                    type="primary"
                    icon={<FieldTimeOutlined />}
                    onClick={handleStart}
                  >
                    ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
                  </Button>
                )}
                {currentWork.status_code === "IN_PROGRESS" && (
                  <Button
                    type="primary"
                    icon={<CheckCircleOutlined />}
                    onClick={handleComplete}
                  >
                    ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                  </Button>
                )}
              </Space>
            }
          >
            <Row gutter={[16, 8]}>
              <Col span={24}>
                <Space wrap>
                  <Tag>Order: {currentWork.order_code || currentWork.order_id}</Tag>
                  <Tag>{currentWork.restaurant_name}</Tag>
                  <Tag>{currentWork.customer_name}</Tag>
                </Space>
              </Col>
              <Col span={24}>
                <Text strong>‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á:</Text>{" "}
                <Text>{currentWork.pickup_address || "-"}</Text>
              </Col>
              <Col span={24}>
                <Text strong>‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà:</Text>{" "}
                <Text>{currentWork.dropoff_address || "-"}</Text>
              </Col>
              <Col span={24}>
                <Space wrap>
                  <Tag>‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á ~ {currentWork.estimate_distance_km ?? "-"} km</Tag>
                  <Tag>‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á ~ {currentWork.estimate_fee ?? "-"} ‡∏ø</Tag>
                </Space>
              </Col>
              <Col span={24}>
                <Divider style={{ margin: "8px 0" }} />
                <Space direction="vertical" size={4}>
                  <Text type="secondary">
                    ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠:{" "}
                    {new Date(currentWork.created_at).toLocaleString()}
                  </Text>
                  {currentWork.work_at && (
                    <Text type="secondary">
                      ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: {new Date(currentWork.work_at).toLocaleString()}
                    </Text>
                  )}
                  {currentWork.finish_at && (
                    <Text type="secondary">
                      ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {new Date(currentWork.finish_at).toLocaleString()}
                    </Text>
                  )}
                </Space>
              </Col>
            </Row>
          </Card>
        ) : (
          <Card style={{ borderRadius: 14 }}>
            <Text style={{ fontSize: 16 }}>
              {isWorking
                ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‚Ä¶"
                : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô ‡∏Å‡∏î ‚Äú‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô"}
            </Text>
          </Card>
        )}
      </div>

      {/* Overlay ‡πÇ‡∏´‡∏•‡∏î */}
      {loading && (
        <div
          style={{
            position: "fixed",
            inset: 0,
            background: "rgba(255,255,255,0.5)",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            pointerEvents: "none",
            zIndex: 999,
          }}
        >
          <Spin size="large" />
        </div>
      )}
    </div>
  );
};

export default RiderWork;
