import React, { useEffect, useMemo, useState } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import {
    Card,
    Row,
    Col,
    Spin,
    Button,
    Avatar,
    Typography,
    message,
    InputNumber,
    Input,
    Descriptions,
    Space,
    Divider,
    Alert,
    Steps,
} from "antd";
import {
    ArrowLeftOutlined,
    DownloadOutlined,
    QrcodeOutlined,
    CheckCircleOutlined,
    ReloadOutlined,
} from "@ant-design/icons";
import QRCode from "qrcode";
// @ts-ignore  // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ TS ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå declare module 'promptpay-qr';
import generatePayload from "promptpay-qr";

const { Title, Text, Paragraph } = Typography;

// ==== ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö ====
const PROMPTPAY_MOBILE = "0934719687"; // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô 
// ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ QR (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const QR_EXPIRE_SECONDS = 300; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ 

function formatMMSS(seconds: number) {
    const s = Math.max(0, Math.floor(seconds));
    const mm = String(Math.floor(s / 60)).padStart(2, "0");
    const ss = String(s % 60).padStart(2, "0");
    return `${mm}:${ss}`;
}

const Payment: React.FC = () => {
    const [messageApi, contextHolder] = message.useMessage();
    const navigate = useNavigate();
    const { search } = useLocation();

    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å query ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å backend ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
    const params = new URLSearchParams(search);
    const initialOrderCode = params.get("order") || "ODR-DEMO-001";
    const initialAmount = params.get("amount") ? Number(params.get("amount")) : 0;

    const [orderCode, setOrderCode] = useState<string>(initialOrderCode);
    const [amount, setAmount] = useState<number | null>(initialAmount || null);
    const [note, setNote] = useState<string>("");

    const [qrDataUrl, setQrDataUrl] = useState<string | null>(null);
    const [generating, setGenerating] = useState<boolean>(false);

    // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const [expireAt, setExpireAt] = useState<number | null>(null); // timestamp ms
    const [remainingSec, setRemainingSec] = useState<number>(0);

    const [verifying, setVerifying] = useState<boolean>(false);

    const GoMainPage = () => {
    // ‡πÇ‡∏´‡∏°‡∏î UI ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡πÅ‡∏Ñ‡πà‡πÇ‡∏ä‡∏ß‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏¢ ‡πÜ ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/redirect
    messageApi.success("‡πÄ‡∏î‡πÇ‡∏° UI: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å... (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)");
    setTimeout(() => {
      navigate("/");      // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    }, 200);
  };

  const handleSuccess = () => {
    // ‡πÇ‡∏´‡∏°‡∏î UI ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: ‡πÅ‡∏Ñ‡πà‡πÇ‡∏ä‡∏ß‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏¢ ‡πÜ ‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/redirect
    messageApi.success("‡πÄ‡∏î‡πÇ‡∏° UI: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å... (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)");
    setTimeout(() => {
      navigate("/payment/success");      // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    }, 200);
  };

    useEffect(() => {
        let timer: number | undefined;
        if (qrDataUrl && expireAt) {
            const tick = () => {
                const left = Math.ceil((expireAt - Date.now()) / 1000);
                setRemainingSec(left);
                if (left <= 0) {
                    // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                    setQrDataUrl(null);
                    setExpireAt(null);
                    messageApi.warning("QR ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà");
                }
            };
            tick();
            timer = window.setInterval(tick, 1000);
        } else {
            setRemainingSec(0);
        }
        return () => {
            if (timer) window.clearInterval(timer);
        };
    }, [qrDataUrl, expireAt, messageApi]);

    // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
    useEffect(() => {
        // (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡∏£‡∏¥‡∏á
        // async function fetchOrder() {
        //   const res = await fetch(`/api/orders/${orderCode}`);
        //   const data = await res.json();
        //   setAmount(data.total); // ‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å backend
        // }
        // fetchOrder();
    }, [orderCode]);

    const handleGenerateQR = async () => {
        if (amount == null || isNaN(Number(amount)) || Number(amount) <= 0) {
            messageApi.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR");
            return;
        }
        try {
            setGenerating(true);

            // 1) EMVCo payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PromptPay
            const payload: string = generatePayload(PROMPTPAY_MOBILE, {
                amount: Number(Number(amount).toFixed(2)),
            });

            // 2) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ QR (data URL)
            const url = await QRCode.toDataURL(payload, { width: 300, margin: 1 });
            setQrDataUrl(url);

            // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á QR
            setExpireAt(Date.now() + QR_EXPIRE_SECONDS * 1000);

            messageApi.success("‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        } catch (err) {
            console.error(err);
            messageApi.error("‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        } finally {
            setGenerating(false);
        }
    };

    const handleClearQR = () => {
        setQrDataUrl(null);
        setExpireAt(null);
        setRemainingSec(0);
    };

    const handleDownloadQR = () => {
        if (!qrDataUrl) return;
        const a = document.createElement("a");
        a.href = qrDataUrl;
        a.download = `QR_${orderCode || "payment"}_${amount || ""}.png`;
        a.click();
    };

    const handleIHavePaid = async () => {
        // TODO: ‡∏¢‡∏¥‡∏á backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ user ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ö slip)
        // await fetch(`/api/payments/confirm`, {...})
        messageApi.info("‡πÄ‡∏î‡πÇ‡∏° UI: ‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° backend)");
    };

    const handleVerifyPayment = async () => {
        // TODO: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å backend (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ payment intent)
        setVerifying(true);
        setTimeout(() => {
            setVerifying(false);
            messageApi.info("‡πÄ‡∏î‡πÇ‡∏° UI: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° backend)");
        }, 800);
    };

    const header = (
        <Card
            style={{
                background: "rgb(239, 102, 75)",
                color: "white",
                marginBottom: 24,
                borderRadius: 16,
            }}
        >
            <Row align="middle" gutter={24}>
                <Col>
                    <Avatar
                        onClick={GoMainPage}
                        size={64}
                        icon={<ArrowLeftOutlined />}
                        style={{
                            cursor: "pointer",
                            backgroundColor: "rgba(255, 255, 255, 0.2)",
                        }}
                    />
                </Col>

                <Col flex="1">
                    <Title level={2} style={{ color: "white", margin: 0 }}>
                        ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô üí≤
                    </Title>
                    <Text style={{ color: "rgba(255, 255, 255, 0.9)", fontSize: 16 }}>
                        ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏î ‚Äú‡∏™‡∏£‡πâ‡∏≤‡∏á QR‚Äù ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô PromptPay
                    </Text>
                </Col>
            </Row>
        </Card>
    );

    return (
        <div style={{ backgroundColor: "white", minHeight: "100vh", width: "100%" }}>
            {contextHolder}
            {header}

            {/* ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ: QR Code (‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠) */}
            <Row justify="center" style={{ padding: "0 8px 0" }}>
                <Col xs={24} md={16} lg={12} xl={14}>
                    <Card
                        bordered
                        style={{ borderRadius: 12 }}
                        bodyStyle={{ display: "flex", flexDirection: "column", alignItems: "center" }}
                    >
                        <Title level={4} style={{ marginTop: 0, textAlign: "center" }}>
                            ‡∏™‡πÅ‡∏Å‡∏ô‡∏à‡πà‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ PromptPay
                        </Title>

                        <div style={{ marginBottom: 8, textAlign: "center" }}>
                            <Text>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: </Text>
                            <Text strong>{PROMPTPAY_MOBILE}</Text>
                            <br />
                            <Text>‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: </Text>
                            <Text strong>
                                {amount != null && !isNaN(Number(amount))
                                    ? `${Number(amount).toFixed(2)} ‡∏ö‡∏≤‡∏ó`
                                    : "-"}
                            </Text>
                        </div>

                        {/* ‡πÅ‡∏ñ‡∏ö‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á */}
                        {qrDataUrl && expireAt && remainingSec > 0 && (
                            <Alert
                                style={{ marginBottom: 12, textAlign: "center" }}
                                type="info"
                                showIcon
                                message={
                                    <span>
                                        QR ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô <b>{formatMMSS(remainingSec)}</b>
                                    </span>
                                }
                            />
                        )}

                        {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á QR ‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á */}
                        <div style={{ margin: "8px 0 16px", display: "flex", justifyContent: "center" }}>
                            {qrDataUrl ? (
                                <img
                                    src={qrDataUrl}
                                    alt="PromptPay QR"
                                    style={{ width: 280, height: 280, objectFit: "contain" }}
                                />
                            ) : (
                                <div
                                    style={{
                                        width: 280,
                                        height: 280,
                                        display: "flex",
                                        alignItems: "center",
                                        justifyContent: "center",
                                        border: "1px dashed #ddd",
                                        borderRadius: 12,
                                    }}
                                >
                                    <Spin tip="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ QR ‚Äî ‡πÉ‡∏™‡πà‡∏¢‡∏≠‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î '‡∏™‡∏£‡πâ‡∏≤‡∏á QR' " />
                                </div>
                            )}
                        </div>

                        <Space wrap>
                            <Button
                                icon={<DownloadOutlined />}
                                disabled={!qrDataUrl}
                                onClick={handleDownloadQR}
                            >
                                ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å QR
                            </Button>

                            {!qrDataUrl && (
                                <Button type="primary" icon={<QrcodeOutlined />} onClick={handleGenerateQR}>
                                    ‡∏™‡∏£‡πâ‡∏≤‡∏á QR ‡πÉ‡∏´‡∏°‡πà
                                </Button>
                            )}
                        </Space>

                        {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÉ‡∏ï‡πâ QR) */}
                        <Divider />
                        <Card style={{ maxWidth: 760, margin: "0 auto" }}>
                            <Title level={4} style={{ marginBottom: 30 }}>
                                ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                            </Title>

                            {/* current = -1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏â‡∏¢ ‡πÜ */}
                            <Steps
                                size="small"
                                direction="vertical"
                                current={-1}
                                items={[
                                    {
                                        title:
                                            '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å QR" ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Ñ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠',
                                    },
                                    {
                                        title:
                                            "‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ö‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô",
                                    },
                                    {
                                        title:
                                            '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏ô‡∏π "‡∏™‡πÅ‡∏Å‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "QR Code" ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏ó‡∏µ‡πà "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"',
                                    },
                                    {
                                        title:
                                            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÅ‡∏Ñ‡∏õ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô ‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∑‡∏≠ ‚Äú‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏µ‡πâ‡πÄ‡∏û‡∏¢‡πå (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢) ‡∏à‡∏≥‡∏Å‡∏±‡∏î‚Äù",
                                    },
                                    {
                                        title:
                                            "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤/‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å",
                                    },
                                ]}
                            />

                            <Paragraph style={{ marginTop: 16 }}>
                                <Text type="secondary">
                                    ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡πá‡∏ï‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                                </Text>
                            </Paragraph>
                        </Card>
                            <Button
                                size="large"
                                onClick={handleSuccess} // ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                style={{ 
                                    height: "48px",
                                    width: "256px",
                                    color: "white",
                                    backgroundColor: "rgb(239, 102, 75)",
                                    border: "1px solid rgba(255, 255, 255, 0.2)",
                                    marginTop: 24 
                                    
                                }}
                                className="Payment-ok-button"
                            >
                                ‡∏ï‡∏Å‡∏•‡∏á
                            </Button>
                    </Card>
                </Col>
            </Row>

            <div style={{ padding: "0 16px 32px", textAlign: "center", marginTop: 16 }}>
                <Text type="secondary">
                    *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡πÇ‡∏°‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á/‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                </Text>
            </div>

            {/* ‡∏ö‡∏•‡πá‡∏≠‡∏Ñ: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ */}
            <Row gutter={[24, 24]} style={{ padding: "0 8px 16px" }} justify="center">
                <Col xs={24} md={14} lg={12}>
                    <Card bordered style={{ borderRadius: 12 }}>
                        <Title level={4} style={{ marginTop: 0 }}>
                            ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                        </Title>
                        <Descriptions column={1} size="middle">
                            <Descriptions.Item label="‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠">
                                <Input
                                    value={orderCode}
                                    onChange={(e) => setOrderCode(e.target.value)}
                                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ODR-2025-0001"
                                />
                            </Descriptions.Item>

                            <Descriptions.Item label="‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞ (‡∏ö‡∏≤‡∏ó)">
                                <InputNumber
                                    style={{ width: "100%" }}
                                    value={amount ?? undefined}
                                    onChange={(v) => setAmount(v == null ? null : Number(v))}
                                    min={0}
                                    step={0.01}
                                    stringMode
                                    placeholder="‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 259.50"
                                />
                            </Descriptions.Item>

                            <Descriptions.Item label="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ / ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏ö">
                                <Input
                                    value={note}
                                    onChange={(e) => setNote(e.target.value)}
                                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ xxx"
                                />
                            </Descriptions.Item>
                        </Descriptions>

                        <Space style={{ marginTop: 16 }} wrap>
                            <Button
                                type="primary"
                                icon={<QrcodeOutlined />}
                                loading={generating}
                                onClick={handleGenerateQR}
                            >
                                ‡∏™‡∏£‡πâ‡∏≤‡∏á QR PromptPay
                            </Button>

                            <Button icon={<ReloadOutlined />} onClick={handleClearQR}>
                                ‡∏•‡πâ‡∏≤‡∏á QR
                            </Button>

                            <Button loading={verifying} onClick={handleVerifyPayment}>
                                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞
                            </Button>

                            <Button type="default" icon={<CheckCircleOutlined />} onClick={handleIHavePaid}>
                                ‡∏â‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                            </Button>
                        </Space>
                    </Card>
                </Col>
            </Row>
        </div>
    );
};

export default Payment;
